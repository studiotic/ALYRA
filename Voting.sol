/*
Projet #1 Voting

Un smart contract de vote peut √™tre simple ou complexe, selon les exigences des √©lections que vous souhaitez soutenir. 

Le vote peut porter sur un petit nombre de propositions (ou de candidats) pr√©s√©lectionn√©es, 
ou sur un nombre potentiellement important de propositions sugg√©r√©es de mani√®re dynamique par les √©lecteurs eux-m√™mes.

Dans ce cadres, vous allez √©crire un smart contract de vote pour une petite organisation. 

Les √©lecteurs, que l'organisation conna√Æt tous, sont inscrits sur une liste blanche (whitelist) gr√¢ce √† leur adresse Ethereum, 
peuvent soumettre de nouvelles propositions lors d'une session d'enregistrement des propositions, 
et peuvent voter sur les propositions lors de la session de vote.

‚úîÔ∏è Le vote n'est pas secret pour les utilisateurs ajout√©s √† la Whitelist
‚úîÔ∏è Chaque √©lecteur peut voir les votes des autres
‚úîÔ∏è Le gagnant est d√©termin√© √† la majorit√© simple
‚úîÔ∏è La proposition qui obtient le plus de voix l'emporte.


üëâ Le processus de vote : 

Voici le d√©roulement de l'ensemble du processus de vote :

    L'administrateur du vote enregistre une liste blanche d'√©lecteurs identifi√©s par leur adresse Ethereum.
    L'administrateur du vote commence la session d'enregistrement de la proposition.
    Les √©lecteurs inscrits sont autoris√©s √† enregistrer leurs propositions pendant que la session d'enregistrement est active.
    L'administrateur de vote met fin √† la session d'enregistrement des propositions.
    L'administrateur du vote commence la session de vote.
    Les √©lecteurs inscrits votent pour leur proposition pr√©f√©r√©e.
    L'administrateur du vote met fin √† la session de vote.
    L'administrateur du vote comptabilise les votes.
    Tout le monde peut v√©rifier les derniers d√©tails de la proposition gagnante.

 

üëâ Les recommandations et exigences :

    üëâ Votre smart contract doit s‚Äôappeler ‚ÄúVoting‚Äù. 

    üëâ Votre smart contract doit utiliser la derni√®re version du compilateur.

    üëâ L‚Äôadministrateur est celui qui va d√©ployer le smart contract. 

    Votre smart contract doit d√©finir les structures de donn√©es suivantes : 

    struct Voter {
    bool isRegistered;
    bool hasVoted;
    uint votedProposalId;
    }

    struct Proposal {
    string description;
    uint voteCount;
    }

    Votre smart contract doit d√©finir une √©num√©ration qui g√®re les diff√©rents √©tats d‚Äôun vote

    enum WorkflowStatus {
    RegisteringVoters,
    ProposalsRegistrationStarted,
    ProposalsRegistrationEnded,
    VotingSessionStarted,
    VotingSessionEnded,
    VotesTallied
    }

    Votre smart contract doit d√©finir un uint winningProposalId qui repr√©sente l‚Äôid du gagnant ou une fonction getWinner qui retourne le gagnant.
    Votre smart contract doit importer le smart contract la librairie ‚ÄúOwnable‚Äù d‚ÄôOpenZepplin.
    Votre smart contract doit d√©finir les √©v√©nements suivants : 

    event VoterRegistered(address voterAddress); 
    event WorkflowStatusChange(WorkflowStatus previousStatus, WorkflowStatus newStatus);
    event ProposalRegistered(uint proposalId);
    event Voted (address voter, uint proposalId);
*/

// SPDX-License-Identifier: MIT
pragma solidity >= 0.8.17;

//d√©claration des librairie externes
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol" ; 

contract Voting is Ownable {

    //###########################################################################################################
    // Librairie et h√©ritage
    // le contrat herite de la librairie openZeppelin Ownable
    // Nous allons utiliser une fonction de cette librairie pour controler l'acces 
    // √† certaines fonctions qui sont r√©serv√©es √† l'administrateur (owner du contrat)
    //###########################################################################################################


    //###########################################################################################################
    // declaration de la structure d'un votant
    // Elle comprend une description sous la forme d'un boolen 
    //###########################################################################################################
    struct Voter {
        address adressVotant;
        bool isRegistered;
        bool hasVoted;
        uint votedProposalId;
    }

    //creation d'un tableau des votants bas√© sur la structure Voter
    Voter[] public tableauDesVotants ;

    //creation d'un entier qui va contenir le nombre de votants
    uint qteVoter ;  

    //###########################################################################################################
    //declaration de la structure d'une proposition de vote
    //Elle comprens une descritpion sous la forme d'une chaine et un compteur repr√©sentant le nombre de votes
    //###########################################################################################################
    struct Proposal {
        string description;
        uint voteCount;
    }

    Proposal[] public tableauProposition ;

    //creation d'un entier qui va contenir le nombre de proposition
    uint qteProposition ;  


    //###########################################################################################################
    //Events impos√©s
    //###########################################################################################################
    event ProposalRegistered(string proposition, uint proposalId);

    event VoterRegistered(address voterAddress); 

    event WorkflowStatusChange(uint WorkflowStatusPreviousStatus, uint WorkflowStatusNewStatus);
    
    event Voted (address voter, uint proposalId);

    event contratCree(address createur, uint statutVote);

    event VotantDejaAjoute(address createur, uint rang);

    //###########################################################################################################
    //statuts de vote impos√©s
    //###########################################################################################################
    enum WorkflowStatus {
    RegisteringVoters,
    ProposalsRegistrationStarted,
    ProposalsRegistrationEnded,
    VotingSessionStarted,
    VotingSessionEnded,
    VotesTallied
    }

    //on cree une instance de l'enum√©ration 
    WorkflowStatus public StatutVote ;

    constructor(){
        //lors de la creation du contrat
        //on d√©termine que le statut est le premier de la liste
        StatutVote = WorkflowStatus.RegisteringVoters ; 

        address adminContrat = msg.sender ;
        emit contratCree(adminContrat , uint(StatutVote) ) ;
    }


    //########################################################
    // temps 1
    // ajoute les votants
    //########################################################

    function ajouteVotant(address adresseVotant) public  {

    //controle l'acc√®s de cette fonction qu'√† l'administrateur du contrat 
    //onlyOwner() ;

    //V√©rifie que nous sommes bien en phase d'ajout de votants
    require( uint(StatutVote) > 0 , "Nous ne sommes plus en ajout de votant ") ;

    //v√©rifie que le votant n'est pas d√©j√† enregistr√©
    qteVoter = tableauDesVotants.length ;

    bool isPresent ; 

    for (i=0 , i++ , i>qteVoter){
        if (tableauDesVotants[i].adresseVotant ==adresseVotant ) then { 
            isPresent = true ;
            //emet un event pour signaler ajout en doublon
            emit VotantDejaAjoute(adresseVotant ,i) ;
            }
    }

    require( isPresent, unicode "Ce votant exite d√©j√† !") ;


    //v√©rifie que l'adresse est bien une adresse


    //cree le votant
    Voter memory nouveauVotant  ;
    nouveauVotant.adressVotant      = adresseVotant ;
    nouveauVotant.isRegistered      = true ;
    nouveauVotant.hasVoted          = false ;
    nouveauVotant.votedProposalId   = 0 ;
    
    //ajoute un votant
    tableauDesVotants.push(nouveauVotant)  ;

    //emet l'event de confirmation
    emit VoterRegistered(adresseVotant) ; 

    }




    function changePhaseVote() public returns(uint){

    //controle l'acc√®s de cette fonction qu'√† l'administrateur du contrat 
    //onlyOwner() ;


    if          ( uint(StatutVote) ==0 ) {
        StatutVote = WorkflowStatus.ProposalsRegistrationStarted ; 
    } else if   ( uint(StatutVote) ==1 ) {
        StatutVote = WorkflowStatus.ProposalsRegistrationEnded ; 
    } else if   ( uint(StatutVote) ==2 ) {
        StatutVote = WorkflowStatus.VotingSessionStarted ; 
    } else if   ( uint(StatutVote) ==3 ) {
        StatutVote = WorkflowStatus.VotingSessionEnded ; 
    } else if   ( uint(StatutVote) ==4 ) {
        StatutVote = WorkflowStatus.VotesTallied ; 
    }

    return uint(StatutVote);

    //statut et valeur
    //statut 0 : RegisteringVoters,
    //statut 1 : ProposalsRegistrationStarted,
    //statut 2 : ProposalsRegistrationEnded,
    //statut 3 : VotingSessionStarted,
    //statut 4 : VotingSessionEnded,
    //statut 5 : VotesTallied
    }


/*



    //########################################################
    //temps 2
    // ajoute les propositions
    //########################################################

    function ajouteProposition(string nouvelleProposition) public   {

        //l'acc√®s de cette fonction est ouverte √† tous les votant et √† l'administrateur 
        
        //

        //v√©rifie que l'on est bien dans la phase de l'ajout des proposition
        

        //verifie que la proposition n'a pas d√©j√† √©t√© propos√©e
        qteProposition = proposition.length;   


        //

        //ajoute la nouvelle proposition au tableau
        proposition[].push(nouvelleProposition);

        //met √† jour le nombre de propositions
        qteProposition = proposition[].length;

        //avant d'emettre l'event accompagn√© de l'index de la proposition
        //on effectue un calcul pour d√©terminer l'id (proposition 1 = ID 0)
        uint indexProposition = qteProposition-1 ;

        //emet un evenement suite √† l'ajout de proposition
        // en pr√©cisant que le nom de la proposition et son ID
        emit ProposalRegistered(nouvelleProposition, indexProposition);


    }
*/

}
